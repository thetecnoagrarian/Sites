1. Core Features:
- Blog website with clean UI using Express and Handlebars
- SQLite database integration (better-sqlite3)
- Simple admin authentication (username/password)
- Image handling and optimization with Sharp
- Search functionality
- Category system
- Responsive design using Shoelace components

2. Pages Structure:
/                   - Home page with hero image and recent posts (5 posts per page)
/about              - About page
/categories         - Categories listing
/category/:name     - Individual category posts
/search            - Search results page
/post/:slug        - Individual post pages (using slugified title)
/admin             - Admin routes:
  /login           - Login page
  /dashboard       - Post management
  /posts/new       - Create new post
  /posts/edit/:id  - Edit existing post

3. Database Schema:
```sql
CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL
);

CREATE TABLE posts (
  id INTEGER PRIMARY KEY,
  title TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,  -- URL-friendly version of title
  body TEXT NOT NULL,
  description TEXT,
  excerpt TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  images TEXT,          -- JSON array of image paths
  captions TEXT         -- JSON array of captions
);

CREATE TABLE categories (
  id INTEGER PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  slug TEXT UNIQUE NOT NULL  -- URL-friendly version of category name
);

CREATE TABLE post_categories (
  post_id INTEGER,
  category_id INTEGER,
  FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
  PRIMARY KEY (post_id, category_id)
);
```

4. Technical Stack:
Backend:
- Express.js for server
- express-handlebars for templating
- better-sqlite3 for database
- Sharp for image optimization
- express-session for authentication
- multer for file uploads
- slugify for URL-friendly titles

Frontend:
- Vanilla JavaScript for interactivity
- Shoelace components and CSS for UI
- Responsive design with CSS Grid/Flexbox
- Client-side form validation
- Image lazy loading with native loading="lazy"

5. Development Setup:
- nodemon for hot reloading
- dotenv for environment variables
- Express error handling middleware
- Morgan for request logging
- Helmet for security headers

6. Image Handling:
- Upload to local filesystem in public/uploads
- Generate optimized versions:
  - thumbnail (300x300)
  - medium (800x600)
  - large (1200x900)
- Convert to WebP with JPEG fallback
- Store relative paths in database

7. Admin Features:
- Simple login system
- CRUD operations for posts
- Dynamic image/caption fields:
  - Add/remove image-caption pairs
  - Preview images before upload
- Rich text editor for post body
- Category management

8. Security Measures:
- CSRF protection
- SQL injection prevention
- XSS protection
- Secure password hashing
- Rate limiting
- Input sanitization

9. Production Considerations:
- Compression middleware
- Static file caching
- Error logging
- Database backups
- PM2 process manager
- Nginx reverse proxy setup

Dynamic Fields for Adding Images and Captions

Use a dynamic form on the "Add Post" page with functionality similar to the example you provided. For Handlebars and plain JavaScript, it can look like this:

<h3>Images and Captions</h3>
<div id="image-fields">
  <div class="image-field">
    <label>
      Image File:
      <input type="file" name="images" accept="image/*" required />
    </label>
    <label>
      Caption:
      <input type="text" name="captions" placeholder="Enter caption" />
    </label>
    <button type="button" onclick="removeImageField(this)">Remove</button>
  </div>
</div>
<button type="button" onclick="addImageField()">Add Another Image</button>

<script>
  function addImageField() {
    const container = document.getElementById('image-fields');
    const newField = document.createElement('div');
    newField.className = 'image-field';
    newField.innerHTML = `
      <label>
        Image File:
        <input type="file" name="images" accept="image/*" required />
      </label>
      <label>
        Caption:
        <input type="text" name="captions" placeholder="Enter caption" />
      </label>
      <button type="button" onclick="removeImageField(this)">Remove</button>
    `;
    container.appendChild(newField);
  }

  function removeImageField(button) {
    const field = button.parentElement;
    field.remove();
  }
</script>
Use sl-card to display post previews for home, search result page and category result page.

New Prompt Section after moving project back to mackbook air m1 ---


## **Summary of Recent Work**

- **Security & Production Readiness**
  - Added and configured CSRF protection (with reminders to keep it enabled in production).
  - Implemented XSS protection by sanitizing post content with `sanitize-html`.
  - Added global rate limiting using `express-rate-limit` (25 requests per 15 minutes per IP).
  - Enabled HTTP response compression with the `compression` middleware.
  - Configured static file caching (30 days, immutable) for all assets served by Express.
  - Integrated robust error logging using the `pino` logger.
  - Confirmed and tested error logging with a temporary error route.
  - Set up database backup reminders and scripts.
  - Added PM2 process manager for production process management and auto-restart on boot.
  - Provided and documented a step-by-step Nginx reverse proxy setup for deployment.

- **Project Management**
  - Updated the README with PM2 usage instructions.
  - Provided a step-by-step guide for moving the project to a new machine (MacBook Air).
  - Clarified how to maintain project and chat continuity when moving to a new development environment.
  - Provided a final git commit message for migration.

---

## **Key Next Steps**

1. **Move Project to New MacBook**
   - Copy the entire `fruitionforestgarden` folder to your MacBook (via hard drive, AirDrop, or git).
   - On the MacBook, delete `node_modules` and run `npm install` to ensure dependencies are correct for Apple Silicon.
   - Copy your `.env` file and any local database/uploads if not in git.

2. **Set Up Development Environment**
   - Install Node.js (Apple Silicon version) and npm.
   - Install PM2 globally: `npm install -g pm2`
   - (Optional) Install Nginx if you want to test reverse proxy locally.

3. **Test the App**
   - Run `npm run dev` to verify local development works.
   - Run `pm2 start src/app.js --name fruitionforestgarden` to test production mode.

4. **Set Up PM2 for Production**
   - Run `pm2 save` and `pm2 startup` to enable auto-start on boot.

5. **Set Up Nginx Reverse Proxy (Production)**
   - Install Nginx on your deployment server.
   - Use the provided Nginx config to proxy requests to your Node.js app.
   - (Optional) Set up SSL with Letâ€™s Encrypt.

6. **Backup & Maintenance**
   - Use the backup script/reminder to regularly back up your database and uploads.
   - Monitor logs with `pm2 logs fruitionforestgarden` and/or review Pino output.

7. **Documentation & Notes**
   - Keep this summary and any important chat snippets in a `NOTES.md` or similar file for future reference.

---

## **Other Reminders**

- Always keep your `.env` and sensitive files secure and out of version control.
- If you open up the site to more users in the future, revisit security (rate limiting, XSS, CSRF, etc.).
- For any new environment, always test thoroughly after migration.

---

**If you need to revisit any setup (PM2, Nginx, backups, etc.), refer to the README and this notes file.**

---

