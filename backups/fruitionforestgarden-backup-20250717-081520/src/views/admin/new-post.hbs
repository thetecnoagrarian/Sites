{{#> layouts/admin}}
<div class="admin-content">
    <div class="admin-header">
        <h1>{{#if post}}Edit Post{{else}}New Post{{/if}}</h1>
    </div>

    <form action="{{#if post}}/admin/dashboard/posts/{{post.id}}/update{{else}}/admin/dashboard/posts/create{{/if}}" method="POST" enctype="multipart/form-data" class="post-form">
        <input type="hidden" name="_csrf" value="{{csrfToken}}">
        {{#if error}}
        <div class="alert alert-danger">{{error}}</div>
        {{/if}}

        <div class="form-group">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" id="title" name="title" value="{{post.title}}" required>
        </div>

        <div class="form-group">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="2">{{post.description}}</textarea>
            <div class="form-text">A brief description of the post that will appear in search results and social media shares</div>
        </div>

        <div class="form-group">
            <label class="form-label">Categories</label>
            <div class="categories-checkbox-group">
                {{#each categories}}
                <div class="form-check">
                    <input type="checkbox" 
                           class="form-check-input" 
                           id="category-{{id}}" 
                           name="categories[]" 
                           value="{{id}}"
                           {{#if selected}}checked{{/if}}>
                    <label class="form-check-label" for="category-{{id}}">
                        {{name}}
                    </label>
                </div>
                {{/each}}
            </div>
        </div>

        <div class="form-group">
            <label for="content" class="form-label">Content</label>
            <textarea class="form-control" id="content" name="body" rows="10" required>{{post.body}}</textarea>
        </div>

        <div class="form-group">
            <label class="form-label">Featured Image</label>
            <sl-button variant="primary" size="small" onclick="document.getElementById('image-input').click()">
                <sl-icon slot="prefix" name="upload"></sl-icon>
                Upload Images
            </sl-button>
            <input type="file" id="image-input" name="image" accept="image/*" class="file-input" multiple style="display: none;">
            {{#if post.images}}
            <div id="existing-images" class="image-preview-container">
                <h4>Current Images <span class="drag-hint">(Drag to reorder - first image will be featured)</span></h4>
                <div id="image-sortable" class="image-sizes">
                    {{#each post.images}}
                    <div class="image-preview-item" data-image-index="{{@index}}">
                        <div class="image-drag-handle">
                            <span class="drag-icon">⋮⋮</span>
                        </div>
                        <img src="{{this.thumbnail}}" 
                             alt="Image preview" 
                             class="lightbox-trigger"
                             data-full-img="{{this.large}}"
                             style="max-width: 100%; height: auto;">
                        <input type="hidden" name="images[{{@index}}]" value="{{this.thumbnail}}">
                        <input type="text" name="captions[{{@index}}]" class="form-control" placeholder="Enter image caption" style="margin-top:0.5rem;" value="{{lookup ../post.captions @index}}" />
                        <span class="size-label">Image {{add @index 1}} {{#if @first}}(Featured){{/if}}</span>
                    </div>
                    {{/each}}
                </div>
            </div>
            {{/if}}
        </div>

        <div class="form-group">
            <label for="excerpt" class="form-label">Excerpt</label>
            <textarea class="form-control" id="excerpt" name="excerpt" rows="3">{{post.excerpt}}</textarea>
            <div class="form-text">A brief summary of the post for previews</div>
        </div>

        <div class="form-group">
            <label for="created_at" class="form-label">Event Date</label>
            <input type="date" class="form-control" id="created_at" name="created_at"
                   value="{{formatDateInput post.created_at}}" required>
            <div class="form-text">Date the event happened (not when posted)</div>
        </div>

        <div class="form-actions">
            <sl-button type="submit" variant="primary">
                <sl-icon slot="prefix" name="check2-circle"></sl-icon>
                {{#if post}}Update{{else}}Create{{/if}} Post
            </sl-button>
            <sl-button href="/admin" variant="neutral">
                <sl-icon slot="prefix" name="x-circle"></sl-icon>
                Cancel
            </sl-button>
        </div>
    </form>
</div>

<!-- Lightbox -->
<div id="lightbox" class="lightbox">
    <div class="lightbox-content">
        <button class="lightbox-close">&times;</button>
        <img id="lightbox-img" src="" alt="">
    </div>
</div>

<!-- Sortable.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
// Check if Sortable loaded
console.log('Sortable available:', typeof Sortable !== 'undefined');
</script>

<style>
.image-sizes {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
}

.image-preview-item {
    flex: 1;
    min-width: 200px;
    max-width: 400px;
    position: relative;
    border: 2px solid transparent;
    border-radius: 8px;
    padding: 8px;
    transition: all 0.2s ease;
    background: #f8f9fa;
}

.image-preview-item:hover {
    border-color: #007bff;
    box-shadow: 0 2px 8px rgba(0, 123, 255, 0.2);
}

.image-preview-item.sortable-ghost {
    opacity: 0.5;
    border-color: #007bff;
    background: #e3f2fd;
}

.image-preview-item.sortable-chosen {
    border-color: #007bff;
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    transform: scale(1.02);
}

.image-drag-handle {
    position: absolute;
    top: 8px;
    left: 8px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 4px;
    border-radius: 4px;
    cursor: grab;
    z-index: 10;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.image-preview-item:hover .image-drag-handle {
    opacity: 1;
}

.image-drag-handle:active {
    cursor: grabbing;
}

.drag-icon {
    font-size: 14px;
}

.image-preview-item img {
    cursor: pointer;
    transition: opacity 0.2s;
    border-radius: 4px;
}

.image-preview-item img:hover {
    opacity: 0.9;
}

.size-label {
    display: block;
    text-align: center;
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #666;
    font-weight: 500;
}

.drag-hint {
    font-size: 0.875rem;
    color: #666;
    font-weight: normal;
}

.preview-info {
    font-size: 0.875rem;
    color: #666;
    margin-top: 0.5rem;
    text-align: center;
}

/* Lightbox styles */
.lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

.lightbox-content {
    position: relative;
    max-width: 90%;
    max-height: 90vh;
}

.lightbox-content img {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
}

.lightbox-close {
    position: absolute;
    top: -40px;
    right: -40px;
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    padding: 10px;
}

.lightbox-close:hover {
    color: #ccc;
}
</style>

<script>
console.log('Admin script loading...');
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing admin functionality...');
    
    // Initialize Sortable for image reordering
    const imageSortable = document.getElementById('image-sortable');
    console.log('Image sortable container found:', !!imageSortable);
    
    if (imageSortable) {
        console.log('Initializing Sortable...');
        if (typeof Sortable !== 'undefined') {
            new Sortable(imageSortable, {
                animation: 150,
                handle: '.image-drag-handle',
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                onEnd: function(evt) {
                    console.log('Sortable onEnd triggered');
                    updateImageOrder();
                }
            });
            console.log('Sortable initialized successfully');
        } else {
            console.error('Sortable library not loaded!');
            // Fallback: add click handlers to manually reorder
            addManualReorderHandlers();
        }
    }

    // Update image order and labels after drag
    function updateImageOrder() {
        const container = document.getElementById('image-sortable');
        const items = Array.from(container.querySelectorAll('.image-preview-item'));
        items.forEach((item, index) => {
            // Update the name attributes to match the new order
            const hiddenInput = item.querySelector('input[type="hidden"][name^="images["]');
            if (hiddenInput) {
                hiddenInput.setAttribute('name', `images[${index}]`);
            }
            const captionInput = item.querySelector('input[type="text"][name^="captions["]');
            if (captionInput) {
                captionInput.setAttribute('name', `captions[${index}]`);
            }
            // Update the label
            const label = item.querySelector('.size-label');
            if (label) {
                if (index === 0) {
                    label.textContent = `Image ${index + 1} (Featured)`;
                } else {
                    label.textContent = `Image ${index + 1}`;
                }
            }
        });
    }

    // Initialize image order on page load
    updateImageOrder();

    // Manual reorder fallback function
    function addManualReorderHandlers() {
        console.log('Adding manual reorder handlers...');
        const items = document.querySelectorAll('.image-preview-item');
        items.forEach((item, index) => {
            const handle = item.querySelector('.image-drag-handle');
            if (handle) {
                handle.addEventListener('click', function() {
                    console.log('Manual reorder clicked for item', index);
                    // Move this item to the front
                    const container = item.parentNode;
                    container.insertBefore(item, container.firstChild);
                    updateImageOrder();
                });
            }
        });
    }

    // Lightbox functionality
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-img');
    const lightboxClose = document.querySelector('.lightbox-close');

    // Open lightbox
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('lightbox-trigger')) {
            e.preventDefault();
            if (lightbox && lightboxImg) {
                lightboxImg.src = e.target.dataset.fullImg || e.target.src;
                lightbox.style.display = 'flex';
            }
        }
    });

    // Close lightbox
    if (lightboxClose && lightbox) {
        lightboxClose.addEventListener('click', function() {
            lightbox.style.display = 'none';
        });
    }

    // Close lightbox on background click
    if (lightbox) {
        lightbox.addEventListener('click', function(e) {
            if (e.target === lightbox) {
                lightbox.style.display = 'none';
            }
        });
    }

    // Close lightbox on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && lightbox && lightbox.style.display === 'flex') {
            lightbox.style.display = 'none';
        }
    });

    // Debug form submission
    const form = document.querySelector('.post-form');
    if (form) {
        form.addEventListener('submit', function(e) {
            console.log('Form submitting...');
            const imageOrderInputs = document.querySelectorAll('input[name="image_order[]"]');
            console.log('Image order inputs found:', imageOrderInputs.length);
            imageOrderInputs.forEach((input, index) => {
                console.log('Image order input', index, 'value:', input.value);
            });
            
            // Also log all form data
            const formData = new FormData(form);
            console.log('Form data entries:');
            for (let [key, value] of formData.entries()) {
                console.log(key, ':', value);
            }
        });
    }
});
</script>

{{/layouts/admin}} 